{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to scTM","text":"<p>scTM is a package for single cell topic modelling for transcriptomics data. Currently, we only have 1 module which supports spatial data (STAMP).</p> <p>Topic models are powerful algorithms used in natural language processing to uncover hidden themes or topics within a collection of documents. The most widely used model, Latent Dirichlet Allocation (LDA), assumes that each document is a mixture of various topics, and each word is generated from one of those topics. In single cell, we assume that each document is a cell and each topic is a gene module. This leads to a intuitive interpretation to single cell that each cell is a mixture of gene modules.</p>"},{"location":"#stamp","title":"STAMP","text":"<p>In STAMP, we have more assumptions on the data generating process. The main two ones are</p> <ol> <li>Spatial Information is important, therefore we need a way to incorporate spatial information in the model. Here, we use a graph neural network for the inference network to incorporate spatial information</li> <li>The gene modules are sparse leading to interpretabiity and more robustness. Therefore, we suggest the use of horseshoe priors</li> </ol> <p>STAMP is solved with black box inference, which leads to efficient optimization.</p>"},{"location":"gen_ref_pages/","title":"Gen ref pages","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"Generate the code api pages and navigation.\"\"\"\n</pre> \"\"\"Generate the code api pages and navigation.\"\"\" In\u00a0[\u00a0]: Copied! <pre>from pathlib import Path\n</pre> from pathlib import Path In\u00a0[\u00a0]: Copied! <pre>import mkdocs_gen_files\n</pre> import mkdocs_gen_files In\u00a0[\u00a0]: Copied! <pre>nav = mkdocs_gen_files.Nav()\n</pre> nav = mkdocs_gen_files.Nav() In\u00a0[\u00a0]: Copied! <pre>for path in sorted(Path(\"sctm\").rglob(\"*.py\")):\n    module_path = path.relative_to(\".\").with_suffix(\"\")\n    doc_path = path.relative_to(\"sctm\").with_suffix(\".md\")\n    full_doc_path = Path(\"api\", doc_path)\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\" or parts[-1] == \"__main__\":\n        continue\n\n    if parts[-1] in [\"analysis\", \"pl\", \"pp\", \"stamp\"]:\n        nav[parts] = doc_path.as_posix()  #\n    else:\n        continue\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path)\n</pre> for path in sorted(Path(\"sctm\").rglob(\"*.py\")):     module_path = path.relative_to(\".\").with_suffix(\"\")     doc_path = path.relative_to(\"sctm\").with_suffix(\".md\")     full_doc_path = Path(\"api\", doc_path)     parts = tuple(module_path.parts)      if parts[-1] == \"__init__\" or parts[-1] == \"__main__\":         continue      if parts[-1] in [\"analysis\", \"pl\", \"pp\", \"stamp\"]:         nav[parts] = doc_path.as_posix()  #     else:         continue      with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:         ident = \".\".join(parts)         fd.write(f\"::: {ident}\")      mkdocs_gen_files.set_edit_path(full_doc_path, path) In\u00a0[\u00a0]: Copied! <pre>with mkdocs_gen_files.open(\"api/SUMMARY.md\", \"w\") as nav_file:  #\n    nav_file.writelines(nav.build_literate_nav())  #\n</pre> with mkdocs_gen_files.open(\"api/SUMMARY.md\", \"w\") as nav_file:  #     nav_file.writelines(nav.build_literate_nav())  #"},{"location":"installation/","title":"Stable version","text":"<p>The latest stable release of scTM can be installed via pip:</p> <p><code>pip install scTM</code></p> <p>Alternative installation for the latest version</p> <p><code>conda create --name sctm python=3.8 git clone https://github.com/JinmiaoChenLab/scTM.git conda activate sctm cd scTM pip install .</code></p>"},{"location":"api/","title":"Welcome to scTM","text":"<p>scTM is a package for single cell topic models for transcriptomcis data. Currently, we only have 1 (STAMP) for spatial transcrtiptomcis.</p>"},{"location":"api/#sctm.stamp.STAMP.__init__","title":"<code>__init__(adata, n_topics=20, n_layers=1, hidden_size=128, layer=None, dropout=0.0, train_size=1, rank=None, categorical_covariate_keys=None, continous_covariate_keys=None, time_covariate_keys=None, enc_distribution='mvn', gene_likelihood='nb', mode='sign', verbose=False)</code>","text":"<p>Initialize model</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>AnnData  object</p> required <code>n_topics</code> <code>int</code> <p>Number of topics to model. Defaults to 10.</p> <code>20</code> <code>n_layers</code> <code>int</code> <p>Number of layers to do SGC. Defaults to 1.</p> <code>1</code> <code>hidden_size</code> <code>int</code> <p>Number of nodes in the hidden layer of the encoder. Defaults to 50.</p> <code>128</code> <code>layer</code> <code>_type_</code> <p>Layer where the counts data are stored. X is used</p> <code>None</code> <code>dropout</code> <code>float</code> <p>Dropout used for the encoder. Defaults to 0.0.</p> <code>0.0</code> <code>categorical_covariate_keys</code> <code>_type_</code> <p>Categorical batch keys</p> <code>None</code> <code>continous_covariate_keys</code> <code>_type_</code> <p>Continous bathc key</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Print out information on the model. Defaults to True.</p> <code>False</code> <code>batch_size</code> <code>int</code> <p>Batch size. Defaults to 1024.</p> required <code>enc_distribution</code> <code>str</code> <p>Encoder distribution. Choices are multivariate normal. Defaults to \"mvn\".</p> <code>'mvn'</code> <code>mode</code> <code>str</code> <p>sign vs sgc(simplified graph convolutions).</p> <code>'sign'</code> <code>beta</code> <code>float</code> <p>Beta as in Beta-VAE. Defaults to 1.</p> required"},{"location":"api/#sctm.stamp.STAMP.train","title":"<code>train(max_epochs=800, min_epochs=100, learning_rate=0.01, betas=(0.9, 0.999), not_cov_epochs=5, device='cuda:0', batch_size=256, sampler='R', weight_decay=0, iterations_to_anneal=1, min_kl=1, max_kl=1, early_stop=True, patience=20, shuffle=True, num_particles=1)</code>","text":"<p>Training the data</p> <p>Parameters:</p> Name Type Description Default <code>max_epochs</code> <code>int</code> <p>Maximum number of epochs to run. Defaults to 2000.</p> <code>800</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of AdamW optimi er. DefaRults to 0.01.</p> <code>0.01</code> <code>device</code> <code>str</code> <p>Which device to run model on. Use \"cpu\" to run on cpu and cuda to run on gpu. Defaults to \"cuda:0\".</p> <code>'cuda:0'</code> <code>weight_decay</code> <code>float</code> <p>Weight decay of AdamW optimizer.  Defaults to 0.1.</p> <code>0</code> <code>early_stop</code> <code>bool</code> <p>Whether to early stop when training plateau.  Defaults to True.</p> <code>True</code> <code>patience</code> <code>int</code> <p>How many epochs to stop training when training plateau. Defaults to 20.</p> <code>20</code>"},{"location":"api/#sctm.stamp.STAMP.get_metrics","title":"<code>get_metrics(topk=20, layer=None, TGC=True, pseudocount=0.1)</code>","text":"<p>Get metrics</p> <p>Parameters:</p> Name Type Description Default <code>topk</code> <code>int</code> <p>Number of top genes to use to score the metrics.  Defaults to 10.</p> <code>20</code> <code>layer</code> <code>_type_</code> <p>Which layer to use to score the metrics.  If none is chosen, use X. Defaults to None.</p> <code>None</code> <code>TGC</code> <code>bool</code> <p>Whether to calculate the topic gene correlation.  Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"api/#sctm.stamp.STAMP.get_cell_by_topic","title":"<code>get_cell_by_topic(adata=None, batch_size=None, device=None)</code>","text":"<p>Get latent topics after training.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>What device to use. Defaults to \"cpu\".</p> <code>None</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>A dataframe of cell by topics where each row sum to one.</p>"},{"location":"api/#sctm.stamp.STAMP.get_feature_by_topic","title":"<code>get_feature_by_topic(device='cpu', return_softmax=False, transpose=False, pseudocount=0.1)</code>","text":"<p>Get the gene modules</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>Which device to use. Defaults to \"cpu\".</p> <code>'cpu'</code> <code>num_samples</code> <code>int</code> <p>Number of samples to use for calculation. Defaults to 1000.</p> required <code>pct</code> <code>float</code> <p>Depreciated . Defaults to 0.5.</p> required <code>return_softmax</code> <code>bool</code> <p>Depreciated. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>sctm<ul> <li>analysis</li> <li>pl</li> <li>pp</li> <li>stamp</li> </ul> </li> </ul>"},{"location":"api/analysis/","title":"analysis","text":""},{"location":"api/analysis/#sctm.analysis.get_topic_disco","title":"<code>get_topic_disco(beta, topics='all', reference=None, topn_genes=20, ncores=20)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>beta</code> <code>_type_</code> <p>Feature by topic returned by STAMP</p> required <code>topics</code> <code>str</code> <p>Which topics to run disco on . Defaults to \"all\".</p> <code>'all'</code> <code>reference</code> <code>_type_</code> <p>Reference to use. None sets to all reference. Defaults to None.</p> <code>None</code> <code>topn_genes</code> <code>int</code> <p>How many top genes to run analysis on. Defaults to 20.</p> <code>20</code> <code>ncores</code> <code>int</code> <p>Number of cores to use. Defaults to 20.</p> <code>20</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>A dictionary with the topics and top associated genesets</p>"},{"location":"api/pl/","title":"pl","text":""},{"location":"api/pl/#sctm.pl.heatmap","title":"<code>heatmap(adata, topic_prop, groupby, dendrogram=False, swap_axes=True, cmap=None, figsize=(10, 5), save=None, **kwargs)</code>","text":"<p>Creates a heatmap of cell(grouped by groupby) by topics</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Adata object</p> required <code>topic_prop</code> <code>_type_</code> <p>Topic proportions returned by STAMP</p> required <code>groupby</code> <code>_type_</code> <p>Column in adata object to arrange the cells</p> required <code>figsize</code> <code>tuple</code> <p>Figsize. Defaults to (10, 5).</p> <code>(10, 5)</code> <code>dendrogram</code> <code>bool</code> <p>Whether to cluster. Defaults to False.</p> <code>False</code> <code>swap_axes</code> <code>bool</code> <p>Whether to swap x and y axis. Defaults to True.</p> <code>True</code> <code>cmap</code> <code>_type_</code> <p>What matplotib cmap to use. Defaults to None.</p> <code>None</code> <code>save</code> <code>_type_</code> <p>Whether to save the object. Defaults to None.</p> <code>None</code>"},{"location":"api/pl/#sctm.pl.matrixplot","title":"<code>matrixplot(adata, topic_prop, groupby, dendrogram=False, swap_axes=True, cmap=None, figsize=(10, 5), save=None, **kwargs)</code>","text":"<p>Creates a matrixplot of cell(grouped by groupby) by topics</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Adata object</p> required <code>topic_prop</code> <code>_type_</code> <p>Topic proportions returned by STAMP</p> required <code>groupby</code> <code>_type_</code> <p>Column in adata object to arrange the cells</p> required <code>figsize</code> <code>tuple</code> <p>Figsize. Defaults to (10, 5).</p> <code>(10, 5)</code> <code>dendrogram</code> <code>bool</code> <p>Whether to cluster. Defaults to False.</p> <code>False</code> <code>swap_axes</code> <code>bool</code> <p>Whether to swap x and y axis. Defaults to True.</p> <code>True</code> <code>cmap</code> <code>_type_</code> <p>What matplotib cmap to use. Defaults to None.</p> <code>None</code> <code>save</code> <code>_type_</code> <p>Whether to save the object. Defaults to None.</p> <code>None</code>"},{"location":"api/pl/#sctm.pl.trackplot","title":"<code>trackplot(adata, topic_prop, groupby, dendrogram=False, swap_axes=True, cmap=None, figsize=(10, 5), save=None, **kwargs)</code>","text":"<p>Creates a trackplot of cell(grouped by groupby) by topics</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Adata object</p> required <code>topic_prop</code> <code>_type_</code> <p>Topic proportions returned by STAMP</p> required <code>groupby</code> <code>_type_</code> <p>Column in adata object to arrange the cells</p> required <code>figsize</code> <code>tuple</code> <p>Figsize. Defaults to (10, 5).</p> <code>(10, 5)</code> <code>dendrogram</code> <code>bool</code> <p>Whether to cluster. Defaults to False.</p> <code>False</code> <code>swap_axes</code> <code>bool</code> <p>Whether to swap x and y axis. Defaults to True.</p> <code>True</code> <code>cmap</code> <code>_type_</code> <p>What matplotib cmap to use. Defaults to None.</p> <code>None</code> <code>save</code> <code>_type_</code> <p>Whether to save the object. Defaults to None.</p> <code>None</code>"},{"location":"api/pl/#sctm.pl.spatialpie","title":"<code>spatialpie(adata, color, N=2, *, basis='spatial', img=None, img_key=_empty, library_id=_empty, crop_coord=None, alpha_img=1.0, bw=False, frameon=False, size=1.0, scale_factor=None, spot_size=None, na_color=None, show=None, return_fig=None, cmap='tab20', legend=True, figsize=None, title=None)</code>","text":"<p>Creates a spatialpie plot of object. Very ugly according to twitter.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Adata object</p> required <code>topic_prop</code> <code>_type_</code> <p>Return</p> required <code>basis</code> <code>str</code> <p>Basis to use. Defaults to \"spatial\".</p> <code>'spatial'</code> <code>img</code> <code>Union[np.ndarray, None]</code> <p>description. Defaults to None.</p> <code>None</code> <code>img_key</code> <code>Union[str, None, Empty]</code> <p>description. Defaults to _empty.</p> <code>_empty</code> <code>library_id</code> <code>Union[str, Empty]</code> <p>description. Defaults to _empty.</p> <code>_empty</code> <code>crop_coord</code> <code>Tuple[int, int, int, int]</code> <p>description.</p> <code>None</code> <code>alpha_img</code> <code>float</code> <p>description. Defaults to 1.0.</p> <code>1.0</code> <code>bw</code> <code>Optional[bool]</code> <p>description. Defaults to False.</p> <code>False</code> <code>frameon</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <code>size</code> <code>float</code> <p>description. Defaults to 1.0.</p> <code>1.0</code> <code>scale_factor</code> <code>Optional[float]</code> <p>description. Defaults to None.</p> <code>None</code> <code>spot_size</code> <code>Optional[float]</code> <p>description. Defaults to None.</p> <code>None</code> <code>na_color</code> <code>Optional[ColorLike]</code> <p>description. Defaults to None.</p> <code>None</code> <code>show</code> <code>Optional[bool]</code> <p>description. Defaults to None.</p> <code>None</code> <code>return_fig</code> <code>Optional[bool]</code> <p>description. Defaults to None.</p> <code>None</code> <code>cmap</code> <code>str</code> <p>description. Defaults to \"tab20\".</p> <code>'tab20'</code> <code>legend</code> <code>bool</code> <p>description. Defaults to True.</p> <code>True</code> <code>figsize</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>title</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Axes, List[Axes], None]</code> <p>Union[Axes, List[Axes], None]: description</p>"},{"location":"api/pl/#sctm.pl.get_rgb_function","title":"<code>get_rgb_function(cmap, min_value, max_value)</code>","text":"<p>Generate a function to map continous values to RGB values using colormap between min_value &amp; max_value.</p>"},{"location":"api/pl/#sctm.pl.rgb_to_ryb","title":"<code>rgb_to_ryb(rgb)</code>","text":"<p>Converts colours from RGB colorspace to RYB</p>"},{"location":"api/pl/#sctm.pl.rgb_to_ryb--parameters","title":"Parameters","text":"<p>rgb     numpy array Nx3</p>"},{"location":"api/pl/#sctm.pl.rgb_to_ryb--returns","title":"Returns","text":"<p>Numpy array Nx3</p>"},{"location":"api/pl/#sctm.pl.ryb_to_rgb","title":"<code>ryb_to_rgb(ryb)</code>","text":"<p>Converts colours from RYB colorspace to RGB</p>"},{"location":"api/pl/#sctm.pl.ryb_to_rgb--parameters","title":"Parameters","text":"<p>ryb     numpy array Nx3</p>"},{"location":"api/pl/#sctm.pl.ryb_to_rgb--returns","title":"Returns","text":"<p>Numpy array Nx3</p>"},{"location":"api/pl/#sctm.pl.plot_spatial","title":"<code>plot_spatial(adata, topic_prop, basis='spatial', bw=False, img=None, library_id=_empty, crop_coord=None, img_key=_empty, spot_size=None, na_color=None, scale_factor=None, scale_default=0.5, show_img=True, display_zeros=False, figsize=(10, 10), **kwargs)</code>","text":"<p>Plot taken from cell2location at https://github.com/BayraktarLab/cell2location. Able to display zeros and also on umap through the basis function</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Adata object with spatial coordinates in adata.obsm['spatial']</p> required <code>topic_prop</code> <code>_type_</code> <p>Topic proportion obtained from STAMP.</p> required <code>basis</code> <code>str</code> <p>Which basis to plot in adata.obsm. Defaults to \"spatial\".</p> <code>'spatial'</code> <code>bw</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <code>img</code> <code>_type_</code> <p>. Defaults to None.</p> <code>None</code> <code>library_id</code> <code>_type_</code> <p>description. Defaults to _empty.</p> <code>_empty</code> <code>crop_coord</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>img_key</code> <code>_type_</code> <p>description. Defaults to _empty.</p> <code>_empty</code> <code>spot_size</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>na_color</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>scale_factor</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>scale_default</code> <code>float</code> <p>description. Defaults to 0.5.</p> <code>0.5</code> <code>show_img</code> <code>bool</code> <p>Whether to display spatial image. Sets to false</p> <code>True</code> <code>display_zeros</code> <code>bool</code> <p>Whether to display cells that have low counts</p> <code>False</code> <code>figsize</code> <code>tuple</code> <p>Figsize of image. Defaults to (10, 10).</p> <code>(10, 10)</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>Function taken from cell2location at</p> <code>https</code> <p>//cell2location.readthedocs.io/en/latest/_modules/cell2location/plt/plot_spatial.html#plot_spatial.</p> <p>Able to plot both on spatial and umap coordinates. Still very raw.</p>"},{"location":"api/pl/#sctm.pl.spatial","title":"<code>spatial(adata, color=None, cmap=None, frameon=None, title=None, wspace=None, hspace=0.25, palette=None, colorbar_loc='right', size=1, basis='spatial', vmax=None, ncols=4, layer=None, show=True, *args, **kwargs)</code>","text":"<p>A faster simple function that uses sc.pl.embedding to plot for non-visium data so it dont take too long. ~sleep. Very inflexible.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Annotated data matrix.</p> required <code>color</code> <code>_type_</code> <p>Keys for annotations of observations/cells or variables/genes</p> <code>None</code> <code>size</code> <code>int</code> <p>size of spots. Defaults to 1.</p> <code>1</code> <code>basis</code> <code>str</code> <p>basis in obsm. Defaults to \"spatial\".</p> <code>'spatial'</code> <code>vmax</code> <code>str</code> <p>The value representing the upper limit of the color scale. Defaults to \"p99\".</p> <code>None</code> <code>show</code> <code>bool</code> <p>Show the plot, do not return axis. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>A plot</p>"},{"location":"api/pp/","title":"pp","text":""},{"location":"api/pp/#sctm.pp.filter_genes","title":"<code>filter_genes(adata, min_cutoff=0.01, max_cutoff=1, expression_cutoff_99q=0, layer=None)</code>","text":"<p>Similar function to sc.pp.filter_genes but uses percentage instead of counts.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Anndata</p> required <code>min_cutoff</code> <code>float</code> <p>Minimum percentage of counts required for a gene to pass filtering. Defaults to 0.01.</p> <code>0.01</code> <code>max_cutoff</code> <code>int</code> <p>Maximum percentage of counts required for a gene to pass filtering. Defaults to 0.01.. Defaults to 1.</p> <code>1</code> <code>expression_cutoff_99q</code> <code>int</code> <p>Minimum expression level of gene at 99th percentile. Defaults to 0.</p> <code>0</code>"},{"location":"api/pp/#sctm.pp.batch_highly_variable_genes","title":"<code>batch_highly_variable_genes(adata, batch_key, n_top_genes, layer=None, subset=False)</code>","text":"<p>Similar function to sc.pp.highly_variable_genes but fixes what I think its a bug in the implementation. Uses flavor seurat_v3 only.</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>Anndata object</p> required <code>batch_key</code> <code>_type_</code> <p>Batch key</p> required <code>n_top_genes</code> <code>_type_</code> <p>description</p> required <code>layer</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <code>subset</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code>"},{"location":"api/stamp/","title":"stamp","text":"<p>Main module.</p>"},{"location":"api/stamp/#sctm.stamp.STAMP","title":"<code>STAMP</code>","text":""},{"location":"api/stamp/#sctm.stamp.STAMP.__init__","title":"<code>__init__(adata, n_topics=20, n_layers=1, hidden_size=128, layer=None, dropout=0.0, train_size=1, rank=None, categorical_covariate_keys=None, continous_covariate_keys=None, time_covariate_keys=None, enc_distribution='mvn', gene_likelihood='nb', mode='sign', verbose=False)</code>","text":"<p>Initialize model</p> <p>Parameters:</p> Name Type Description Default <code>adata</code> <code>_type_</code> <p>AnnData  object</p> required <code>n_topics</code> <code>int</code> <p>Number of topics to model. Defaults to 10.</p> <code>20</code> <code>n_layers</code> <code>int</code> <p>Number of layers to do SGC. Defaults to 1.</p> <code>1</code> <code>hidden_size</code> <code>int</code> <p>Number of nodes in the hidden layer of the encoder. Defaults to 50.</p> <code>128</code> <code>layer</code> <code>_type_</code> <p>Layer where the counts data are stored. X is used</p> <code>None</code> <code>dropout</code> <code>float</code> <p>Dropout used for the encoder. Defaults to 0.0.</p> <code>0.0</code> <code>categorical_covariate_keys</code> <code>_type_</code> <p>Categorical batch keys</p> <code>None</code> <code>continous_covariate_keys</code> <code>_type_</code> <p>Continous bathc key</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>Print out information on the model. Defaults to True.</p> <code>False</code> <code>batch_size</code> <code>int</code> <p>Batch size. Defaults to 1024.</p> required <code>enc_distribution</code> <code>str</code> <p>Encoder distribution. Choices are multivariate normal. Defaults to \"mvn\".</p> <code>'mvn'</code> <code>mode</code> <code>str</code> <p>sign vs sgc(simplified graph convolutions).</p> <code>'sign'</code> <code>beta</code> <code>float</code> <p>Beta as in Beta-VAE. Defaults to 1.</p> required"},{"location":"api/stamp/#sctm.stamp.STAMP.train","title":"<code>train(max_epochs=800, min_epochs=100, learning_rate=0.01, betas=(0.9, 0.999), not_cov_epochs=5, device='cuda:0', batch_size=256, sampler='R', weight_decay=0, iterations_to_anneal=1, min_kl=1, max_kl=1, early_stop=True, patience=20, shuffle=True, num_particles=1)</code>","text":"<p>Training the data</p> <p>Parameters:</p> Name Type Description Default <code>max_epochs</code> <code>int</code> <p>Maximum number of epochs to run. Defaults to 2000.</p> <code>800</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of AdamW optimi er. DefaRults to 0.01.</p> <code>0.01</code> <code>device</code> <code>str</code> <p>Which device to run model on. Use \"cpu\" to run on cpu and cuda to run on gpu. Defaults to \"cuda:0\".</p> <code>'cuda:0'</code> <code>weight_decay</code> <code>float</code> <p>Weight decay of AdamW optimizer.  Defaults to 0.1.</p> <code>0</code> <code>early_stop</code> <code>bool</code> <p>Whether to early stop when training plateau.  Defaults to True.</p> <code>True</code> <code>patience</code> <code>int</code> <p>How many epochs to stop training when training plateau. Defaults to 20.</p> <code>20</code>"},{"location":"api/stamp/#sctm.stamp.STAMP.get_metrics","title":"<code>get_metrics(topk=20, layer=None, TGC=True, pseudocount=0.1)</code>","text":"<p>Get metrics</p> <p>Parameters:</p> Name Type Description Default <code>topk</code> <code>int</code> <p>Number of top genes to use to score the metrics.  Defaults to 10.</p> <code>20</code> <code>layer</code> <code>_type_</code> <p>Which layer to use to score the metrics.  If none is chosen, use X. Defaults to None.</p> <code>None</code> <code>TGC</code> <code>bool</code> <p>Whether to calculate the topic gene correlation.  Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"api/stamp/#sctm.stamp.STAMP.get_cell_by_topic","title":"<code>get_cell_by_topic(adata=None, batch_size=None, device=None)</code>","text":"<p>Get latent topics after training.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>What device to use. Defaults to \"cpu\".</p> <code>None</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>A dataframe of cell by topics where each row sum to one.</p>"},{"location":"api/stamp/#sctm.stamp.STAMP.get_feature_by_topic","title":"<code>get_feature_by_topic(device='cpu', return_softmax=False, transpose=False, pseudocount=0.1)</code>","text":"<p>Get the gene modules</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>Which device to use. Defaults to \"cpu\".</p> <code>'cpu'</code> <code>num_samples</code> <code>int</code> <p>Number of samples to use for calculation. Defaults to 1000.</p> required <code>pct</code> <code>float</code> <p>Depreciated . Defaults to 0.5.</p> required <code>return_softmax</code> <code>bool</code> <p>Depreciated. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p>"},{"location":"notebooks/stamp/Simulation/","title":"STAMP simulation example","text":"In\u00a0[107]: Copied! <pre>import os\n\nimport anndata as ad\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport scipy\nimport seaborn as sns\nimport sctm\nimport squidpy as sq\n\n%load_ext autoreload\n%autoreload 2\n</pre> import os  import anndata as ad import numpy as np import pandas as pd import scanpy as sc import scipy import seaborn as sns import sctm import squidpy as sq  %load_ext autoreload %autoreload 2 <pre>The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n</pre> In\u00a0[2]: Copied! <pre>adata = sc.read_h5ad(\"adata.h5ad\")\n</pre> adata = sc.read_h5ad(\"adata.h5ad\") <p>Here, we visualize the ground truth topics</p> In\u00a0[8]: Copied! <pre>gt = pd.DataFrame(adata.obsm['spfac'], index = adata.obs_names, columns = [f\"GT{i}\" for i in range(1,6)])\nfor i in gt.columns:\n    adata.obs[i] = gt[i]\nsctm.pl.spatial(adata, color = gt.columns, size = 200, ncols = 5, wspace = 0)\n</pre> gt = pd.DataFrame(adata.obsm['spfac'], index = adata.obs_names, columns = [f\"GT{i}\" for i in range(1,6)]) for i in gt.columns:     adata.obs[i] = gt[i] sctm.pl.spatial(adata, color = gt.columns, size = 200, ncols = 5, wspace = 0) <p>Here, we visualized some of the genes/features in our data. Most of them are a combination of one of the pattern above. Some of them are empty like feature 0. Feature 2 for example is a combination of the GT3 and GT4</p> In\u00a0[121]: Copied! <pre>sctm.pl.spatial(adata, color = adata.var_names[:5], ncols = 5, size = 200, vmax = 'p99', wspace =0,\n               layer = 'counts')\n</pre> sctm.pl.spatial(adata, color = adata.var_names[:5], ncols = 5, size = 200, vmax = 'p99', wspace =0,                layer = 'counts') In\u00a0[116]: Copied! <pre>sctm.seed.seed_everything(0)\nsq.gr.spatial_neighbors(adata, n_neighs=8)\nmodel = sctm.stamp.STAMP(adata, 5, layer = \"counts\", gene_likelihood ='nb')\nmodel.train(learning_rate = 0.01, batch_size = 1296, shuffle = True, min_epochs = 800)\n</pre> sctm.seed.seed_everything(0) sq.gr.spatial_neighbors(adata, n_neighs=8) model = sctm.stamp.STAMP(adata, 5, layer = \"counts\", gene_likelihood ='nb') model.train(learning_rate = 0.01, batch_size = 1296, shuffle = True, min_epochs = 800) <pre>Computing background frequencies\n</pre> <pre>  0%|                                                                                                                                     | 0/800 [00:00&lt;?, ?it/s]/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.0.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\nEpoch Loss:802.594: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 800/800 [01:21&lt;00:00,  9.84it/s]\n</pre> <p>STAMP gives two different outputs. The topic prop gets us the latent topic proportions,  and the beta gives us the gene modules via get_cell_by_topic() and get_feature_by_topic() respectively.</p> In\u00a0[117]: Copied! <pre>topic_prop = model.get_cell_by_topic()\n# We used a higher psuedocount that usual as there are a higher amount of genes that have no expression \n# in this simualtion data than actual data\nbeta = model.get_feature_by_topic(pseudocount = 0.3)\nfor i in topic_prop.columns:\n    adata.obs[i] = topic_prop[i]\n</pre> topic_prop = model.get_cell_by_topic() # We used a higher psuedocount that usual as there are a higher amount of genes that have no expression  # in this simualtion data than actual data beta = model.get_feature_by_topic(pseudocount = 0.3) for i in topic_prop.columns:     adata.obs[i] = topic_prop[i] In\u00a0[118]: Copied! <pre>sctm.pl.spatial(adata, color = topic_prop.columns, size = 200, layer = \"counts\", vmax = 'p99', ncols = 5)\n</pre> sctm.pl.spatial(adata, color = topic_prop.columns, size = 200, layer = \"counts\", vmax = 'p99', ncols = 5) <p>We plot the top 4 genes of each topic</p> In\u00a0[119]: Copied! <pre>for topic in topic_prop.columns:\n    sctm.pl.spatial(adata, color = beta.nlargest(4, topic).index, size = 200, layer = \"counts\", vmax = 'p95')\n</pre> for topic in topic_prop.columns:     sctm.pl.spatial(adata, color = beta.nlargest(4, topic).index, size = 200, layer = \"counts\", vmax = 'p95') In\u00a0[120]: Copied! <pre>def corr(df1, df2):\n    return pd.concat([df1, df2], axis=1, keys=['df1', 'df2']).corr().loc['df2', 'df1']\n\nsns.heatmap(corr(topic_prop, gt), annot = True)\n</pre> def corr(df1, df2):     return pd.concat([df1, df2], axis=1, keys=['df1', 'df2']).corr().loc['df2', 'df1']  sns.heatmap(corr(topic_prop, gt), annot = True) Out[120]: <pre>&lt;Axes: &gt;</pre>"},{"location":"notebooks/stamp/example1/","title":"STAMP breast cancer and cell/phenotype inference with GSEA","text":"In\u00a0[3]: Copied! <pre>import scanpy as sc\nimport numpy as np\nimport sctm\nimport squidpy as sq\n\n%load_ext autoreload\n%autoreload 2\n</pre> import scanpy as sc import numpy as np import sctm import squidpy as sq  %load_ext autoreload %autoreload 2 <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/geopandas/_compat.py:124: UserWarning: The Shapely GEOS version (3.11.1-CAPI-1.17.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.4-CAPI-1.16.2). Conversions between both will be slow.\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/spatialdata/__init__.py:9: UserWarning: Geopandas was set to use PyGEOS, changing to shapely 2.0 with:\n\n\tgeopandas.options.use_pygeos = True\n\nIf you intended to use PyGEOS, set the option to False.\n  _check_geopandas_using_shapely()\n</pre> In\u00a0[4]: Copied! <pre>adata = sc.datasets.visium_sge('V1_Breast_Cancer_Block_A_Section_1')\nadata.var_names_make_unique()\n</pre> adata = sc.datasets.visium_sge('V1_Breast_Cancer_Block_A_Section_1') adata.var_names_make_unique() <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/anndata/_core/anndata.py:1840: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n  utils.warn_names_duplicates(\"var\")\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/anndata/_core/anndata.py:1840: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n  utils.warn_names_duplicates(\"var\")\n</pre> <p>Here we do the usual preprocessing in singe cell</p> <ul> <li>remove low counts</li> <li>remove low expressed genes (We use sctm functio which just cuts off by percentage instead of exact number)</li> <li>find variable features (Personally, I found that a higher number of variable genes work better)</li> </ul> In\u00a0[5]: Copied! <pre>sc.pp.filter_cells(adata, min_genes=50)\nsctm.pp.filter_genes(adata, 0.03,  expression_cutoff_99q = 1)\nsc.pp.highly_variable_genes(adata, n_top_genes=6000, flavor=\"seurat_v3\")\n</pre> sc.pp.filter_cells(adata, min_genes=50) sctm.pp.filter_genes(adata, 0.03,  expression_cutoff_99q = 1) sc.pp.highly_variable_genes(adata, n_top_genes=6000, flavor=\"seurat_v3\") <p>We build the graph in using squidpy's default function (Default option is the ring around each spot)</p> In\u00a0[6]: Copied! <pre>sq.gr.spatial_neighbors(adata)\n</pre> sq.gr.spatial_neighbors(adata) In\u00a0[7]: Copied! <pre>n_topics = 20\n</pre> n_topics = 20 In\u00a0[8]: Copied! <pre># Only hvgs and fit a total of 20 topics\nmodel = sctm.stamp.STAMP(\n    adata[:, adata.var.highly_variable],\n    n_topics = n_topics,\n)\n\n# uses gpu by default to use cpu use device=\"cpu\"\nmodel.train()\n</pre> # Only hvgs and fit a total of 20 topics model = sctm.stamp.STAMP(     adata[:, adata.var.highly_variable],     n_topics = n_topics, )  # uses gpu by default to use cpu use device=\"cpu\" model.train() <pre>Computing background frequencies\n</pre> <pre>  0%|                                                                                                                                     | 0/800 [00:00&lt;?, ?it/s]/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.0.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\nEpoch Loss:6209.605:  19%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                                   | 149/800 [05:22&lt;23:31,  2.17s/it]</pre> <pre>Early Stopping\n</pre> <pre>\n</pre> In\u00a0[11]: Copied! <pre># Get topic prop which is the latent representation and beta which are the gene modules\ntopic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\n# Add it into adata to visualize\nfor i in topic_prop.columns:\n    adata.obs[i] = topic_prop[i]\n</pre> # Get topic prop which is the latent representation and beta which are the gene modules topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic() # Add it into adata to visualize for i in topic_prop.columns:     adata.obs[i] = topic_prop[i] In\u00a0[12]: Copied! <pre>sc.pl.spatial(adata, color = topic_prop.columns, ncols = 5, vmax ='p99')\n</pre> sc.pl.spatial(adata, color = topic_prop.columns, ncols = 5, vmax ='p99') In\u00a0[13]: Copied! <pre>top_genes = []\nfor i in topic_prop.columns:\n    top_genes += beta.nlargest(1, i).index.tolist()\n</pre> top_genes = [] for i in topic_prop.columns:     top_genes += beta.nlargest(1, i).index.tolist() In\u00a0[14]: Copied! <pre>sc.pl.spatial(adata, color = top_genes, vmax = 'p99', ncols = 5)\n</pre> sc.pl.spatial(adata, color = top_genes, vmax = 'p99', ncols = 5) <p>Additional plotting function(taken and editted from cell2location). On a Visium dataset, it is kinda of a marker-free deconvolution.</p> In\u00a0[15]: Copied! <pre>fig = sctm.pl.plot_spatial(adata, topic_prop.loc[:, [\"Topic1\", \"Topic2\", \"Topic3\", \"Topic4\"]])\n</pre> fig = sctm.pl.plot_spatial(adata, topic_prop.loc[:, [\"Topic1\", \"Topic2\", \"Topic3\", \"Topic4\"]]) In\u00a0[\u00a0]: Copied! <pre>sctm.analysis.get_enrichr_geneset()\n</pre> sctm.analysis.get_enrichr_geneset() <p>Over-enrichment analysis. We provide a convenice function</p> In\u00a0[35]: Copied! <pre># Annotate with DISCOtoolkit_py\n#!pip install discotoolkit\ndisco_results = sctm.analysis.get_topic_enrichr(beta, geneset = \"KEGG_2019_Human\")\n</pre> # Annotate with DISCOtoolkit_py #!pip install discotoolkit disco_results = sctm.analysis.get_topic_enrichr(beta, geneset = \"KEGG_2019_Human\") In\u00a0[37]: Copied! <pre>disco_results['Topic10']\n</pre> disco_results['Topic10'] Out[37]: Gene_set Term Overlap P-value Adjusted P-value Old P-value Old Adjusted P-value Odds Ratio Combined Score Genes 0 KEGG_2019_Human Estrogen signaling pathway 4/137 0.000009 0.000103 0 0 37.306391 431.915099 KRT17;KRT15;KRT14;TFF1 1 KEGG_2019_Human IL-17 signaling pathway 3/93 0.000105 0.000576 0 0 39.000000 357.384969 S100A9;S100A8;S100A7 2 KEGG_2019_Human African trypanosomiasis 2/37 0.000620 0.002272 0 0 63.317460 467.693511 HBB;HBA2 3 KEGG_2019_Human Malaria 2/49 0.001086 0.002987 0 0 47.122931 321.618214 HBB;HBA2 4 KEGG_2019_Human Nicotine addiction 1/40 0.039267 0.086388 0 0 26.910931 87.120572 GABRP 5 KEGG_2019_Human GABAergic synapse 1/89 0.085375 0.137046 0 0 11.897129 29.275335 GABRP 6 KEGG_2019_Human Morphine addiction 1/91 0.087211 0.137046 0 0 11.631579 28.374333 GABRP 7 KEGG_2019_Human Retrograde endocannabinoid signaling 1/148 0.138104 0.179361 0 0 7.100967 14.058122 GABRP 8 KEGG_2019_Human Wnt signaling pathway 1/158 0.146750 0.179361 0 0 6.645323 12.752542 MMP7 9 KEGG_2019_Human Human T-cell leukemia virus 1 infection 1/219 0.197732 0.217505 0 0 4.771125 7.733243 MMP7 10 KEGG_2019_Human Neuroactive ligand-receptor interaction 1/338 0.288978 0.288978 0 0 3.067781 3.808361 GABRP"},{"location":"notebooks/stamp/example2/","title":"STAMP joint mouse brain Visium","text":"In\u00a0[1]: Copied! <pre>import scanpy as sc\nimport numpy as np\nimport sctm\nimport squidpy as sq\nimport sklearn\nimport seaborn as sns\n\n%load_ext autoreload\n%autoreload 2\n</pre> import scanpy as sc import numpy as np import sctm import squidpy as sq import sklearn import seaborn as sns  %load_ext autoreload %autoreload 2 <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/geopandas/_compat.py:124: UserWarning: The Shapely GEOS version (3.11.1-CAPI-1.17.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.4-CAPI-1.16.2). Conversions between both will be slow.\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/spatialdata/__init__.py:9: UserWarning: Geopandas was set to use PyGEOS, changing to shapely 2.0 with:\n\n\tgeopandas.options.use_pygeos = True\n\nIf you intended to use PyGEOS, set the option to False.\n  _check_geopandas_using_shapely()\n</pre> <p>In this tutorial, we demonstrate how to analyse multiple tissue slices in horizontal integration. Here we take mouse anterior and posterior brain as example. ST data were downloaded from https://www.10xgenomics.com/. The two slices are aligned for visual purposes</p> <p>The prepocessed data can be accessible and downloaded via https://zenodo.org/records/10988053.</p> In\u00a0[2]: Copied! <pre>adata = sc.read_h5ad(\n    \"../../../../STAMP/Reproducibility/ProcessedData/Visium_Mousebrain/adata_benchmark.h5ad\"\n)\nadata.var_names_make_unique()\n</pre> adata = sc.read_h5ad(     \"../../../../STAMP/Reproducibility/ProcessedData/Visium_Mousebrain/adata_benchmark.h5ad\" ) adata.var_names_make_unique() In\u00a0[3]: Copied! <pre>sc.pp.calculate_qc_metrics(adata, inplace=True)\nadata.layers[\"counts\"] = adata.X.copy()\n</pre> sc.pp.calculate_qc_metrics(adata, inplace=True) adata.layers[\"counts\"] = adata.X.copy() In\u00a0[4]: Copied! <pre>sq.gr.spatial_neighbors(adata, library_key=\"data\")\n</pre> sq.gr.spatial_neighbors(adata, library_key=\"data\") In\u00a0[\u00a0]: Copied! <pre>sctm.seed.seed_everything(5)\nmodel = sctm.stamp.STAMP(\n    adata[:, adata.var.highly_variable],\n    n_topics=n_topics,\n    layer = \"counts\",\n    categorical_covariate_keys = [\"data\"],\n    gene_likelihood = \"nb\")\n\nmodel.train(learning_rate = 0.01, min_epochs = 200)\n\ntopic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\nfor i in topic_prop.columns:\n    adata.obs[i] = topic_prop[i]\n</pre> sctm.seed.seed_everything(5) model = sctm.stamp.STAMP(     adata[:, adata.var.highly_variable],     n_topics=n_topics,     layer = \"counts\",     categorical_covariate_keys = [\"data\"],     gene_likelihood = \"nb\")  model.train(learning_rate = 0.01, min_epochs = 200)  topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic() for i in topic_prop.columns:     adata.obs[i] = topic_prop[i] In\u00a0[44]: Copied! <pre>topic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic(pseudocount = 0.0)\nfor i in topic_prop.columns:\n    adata.obs[i] = topic_prop[i]\n\ntop_genes = []\nfor i in topic_prop.columns:\n    top_genes += beta.nlargest(1, i).index.tolist()\n</pre> topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic(pseudocount = 0.0) for i in topic_prop.columns:     adata.obs[i] = topic_prop[i]  top_genes = [] for i in topic_prop.columns:     top_genes += beta.nlargest(1, i).index.tolist() In\u00a0[45]: Copied! <pre>sctm.pl.spatial(adata, color=topic_prop.columns, ncols=5, size=40, vmax=\"p99\")\n</pre> sctm.pl.spatial(adata, color=topic_prop.columns, ncols=5, size=40, vmax=\"p99\") In\u00a0[46]: Copied! <pre>sctm.pl.spatial(adata, color=top_genes, ncols=5, size=40, vmax=\"p99\")\n</pre> sctm.pl.spatial(adata, color=top_genes, ncols=5, size=40, vmax=\"p99\") <p>Plot out the different layers (Cell2location plots)</p> In\u00a0[47]: Copied! <pre>topics = [\"Topic1\", \"Topic7\", \"Topic13\", \"Topic22\", \"Topic25\", \"Topic10\", \"Topic16\"]\nfig = sctm.pl.plot_spatial(\n    adata,\n    topic_prop.loc[:, topics],\n    spot_size=7,\n    display_zeros=True,\n    axis_y_flipped=True,\n)\n</pre> topics = [\"Topic1\", \"Topic7\", \"Topic13\", \"Topic22\", \"Topic25\", \"Topic10\", \"Topic16\"] fig = sctm.pl.plot_spatial(     adata,     topic_prop.loc[:, topics],     spot_size=7,     display_zeros=True,     axis_y_flipped=True, )"},{"location":"notebooks/stamp/example3/","title":"STAMP lung cancer SMI with DISCO","text":"<p>Analysis on Human Lung SMI Data</p> In\u00a0[28]: Copied! <pre>import scanpy as sc\nimport numpy as np\nimport sctm\nimport squidpy as sq\nimport pandas as pd\nimport seaborn as sns\nimport scvi\n\n%load_ext autoreload\n%autoreload 2\n</pre> import scanpy as sc import numpy as np import sctm import squidpy as sq import pandas as pd import seaborn as sns import scvi  %load_ext autoreload %autoreload 2 <pre>The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n</pre> <p>In this tutorial, we demonstrate how to analyse single cell level nanostring smi data. We transferred our data from the Giotto object located here https://nanostring.com/products/cosmx-spatial-molecular-imager/nsclc-ffpe-dataset. The processed dataset can be found at https://zenodo.org/records/10988053.</p> In\u00a0[\u00a0]: Copied! <pre>adata = sc.read_h5ad(\n    \"../../../../STAMP/Reproducibility/ProcessedData/SMI_Lung/Lung5-3.h5ad\"\n)\nadata.var_names_make_unique()\n</pre> adata = sc.read_h5ad(     \"../../../../STAMP/Reproducibility/ProcessedData/SMI_Lung/Lung5-3.h5ad\" ) adata.var_names_make_unique() In\u00a0[\u00a0]: Copied! <pre>adata.obsm['spatial'] = adata.obsm['spatial_raw']\n</pre> adata.obsm['spatial'] = adata.obsm['spatial_raw'] In\u00a0[\u00a0]: Copied! <pre>sc.pl.spatial(adata, spot_size = 0.03, color = 'cell_type')\n</pre> sc.pl.spatial(adata, spot_size = 0.03, color = 'cell_type') In\u00a0[\u00a0]: Copied! <pre>sc.pp.filter_cells(adata, min_counts=50)\nsctm.pp.filter_genes(adata, 0.01)\nsc.pp.highly_variable_genes(adata, n_top_genes=600, flavor=\"seurat_v3\")\n</pre> sc.pp.filter_cells(adata, min_counts=50) sctm.pp.filter_genes(adata, 0.01) sc.pp.highly_variable_genes(adata, n_top_genes=600, flavor=\"seurat_v3\") In\u00a0[\u00a0]: Copied! <pre># Build neighborhood graph\nsq.gr.spatial_neighbors(adata, n_neighs=round(1/1000 * adata.n_obs))\n</pre> # Build neighborhood graph sq.gr.spatial_neighbors(adata, n_neighs=round(1/1000 * adata.n_obs)) In\u00a0[\u00a0]: Copied! <pre>n_topics = 15\n# Only hvgs and fit a total of 30 topics here\nsctm.seed.seed_everything(0)\n#\nmodel = sctm.stamp.STAMP(\n    adata[:, adata.var.highly_variable],\n    n_topics=n_topics,\n    gene_likelihood = \"nb\")\n# uses gpu by default  to use cpu use device=\"cpu\"\nmodel.train(learning_rate = 0.01)\n\ntopic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\nfor i in topic_prop.columns:\n    adata.obs[i] = topic_prop[i]\n</pre> n_topics = 15 # Only hvgs and fit a total of 30 topics here sctm.seed.seed_everything(0) # model = sctm.stamp.STAMP(     adata[:, adata.var.highly_variable],     n_topics=n_topics,     gene_likelihood = \"nb\") # uses gpu by default  to use cpu use device=\"cpu\" model.train(learning_rate = 0.01)  topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic() for i in topic_prop.columns:     adata.obs[i] = topic_prop[i] <pre>Computing background frequencies\n</pre> <pre>  0%|                                                                                                                        | 0/800 [00:00&lt;?, ?it/s]/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.0.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\nEpoch Loss:241.257:  10%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                             | 80/800 [1:16:56&lt;11:35:13, 57.94s/it]</pre> In\u00a0[31]: Copied! <pre>topic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\n# Add it into adata to visualize\nfor i in topic_prop.columns:\n    adata.obs[i] = topic_prop[i]\n</pre> topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic() # Add it into adata to visualize for i in topic_prop.columns:     adata.obs[i] = topic_prop[i] In\u00a0[32]: Copied! <pre>sctm.pl.spatial(adata, color = topic_prop.columns, size = 7, vmax = 'p99')\n</pre> sctm.pl.spatial(adata, color = topic_prop.columns, size = 7, vmax = 'p99') <p>Analysis of topics with DISCO. In general, disco is very good at human celltypes that are not cancer related. Alternatively, we can also run other analysis such as over-enrichment analysis as well</p> In\u00a0[33]: Copied! <pre>celltypes = sctm.analysis.get_topic_disco(beta)\n</pre> celltypes = sctm.analysis.get_topic_disco(beta) <pre>[Parallel(n_jobs=1)]: Done 3280 tasks      | elapsed:  2.8min\n[Parallel(n_jobs=1)]: Done 3280 tasks      | elapsed:  2.8min\n[Parallel(n_jobs=1)]: Done 3280 tasks      | elapsed:  2.8min\n[Parallel(n_jobs=1)]: Done 3280 tasks      | elapsed:  2.9min\n[Parallel(n_jobs=1)]: Done 3280 tasks      | elapsed:  2.9min\n[Parallel(n_jobs=1)]: Done 3280 tasks      | elapsed:  2.9min\n[Parallel(n_jobs=1)]: Done 3280 tasks      | elapsed:  2.9min\n</pre> In\u00a0[37]: Copied! <pre>filtered = [] \nfor i in celltypes.keys():\n    # Filter out the low overlap\n    df = celltypes[i].loc[celltypes[i].overlap &gt; 5]\n    # Filter only in lung\n    df = df.loc[df['name'].str.contains(\"lung\")]\n    df[\"Topic\"] = i\n    filtered.append(df.head(3))\n</pre> filtered = []  for i in celltypes.keys():     # Filter out the low overlap     df = celltypes[i].loc[celltypes[i].overlap &gt; 5]     # Filter only in lung     df = df.loc[df['name'].str.contains(\"lung\")]     df[\"Topic\"] = i     filtered.append(df.head(3)) In\u00a0[38]: Copied! <pre>filtered = pd.concat(filtered)\nfiltered\n</pre> filtered = pd.concat(filtered) filtered Out[38]: pval or name gene background overlap geneset Topic 139 0.0 51.430 Goblet cell vs All others in lung EPCAM,S100P,AGR2,PSCA,ERBB3,KRT19,CEACAM6,KRT17 9264 8 166 Topic1 143 0.0 36.123 Airway basal cell vs All others in lung SLC2A1,EPCAM,DDR1,AGR2,CDH1,KRT19,KRT17,S100P,... 9264 10 348 Topic1 141 0.0 32.913 Club cell vs All others in lung EPCAM,SPINK1,AGR2,KRT19,ERBB3,CDH1 9264 6 166 Topic1 275 0.0 163.079 Mast cell vs All others in lung RGS1,RGS2,IL1RL1,CPA3,KIT,HPGDS,PTGS1,TPSB2,TP... 9264 17 344 Topic2 455 0.0 109.297 GZMK CD8 T cell vs All others in lung CD2,CD8A,DUSP2,TIGIT,FYB1,GZMK,GZMA,CD69,CCL5,... 9264 17 497 Topic3 456 0.0 73.825 GZMB CD8 T cell vs All others in lung CD2,CD8A,GZMA,CCL5,GZMK,STAT4,ITK,KLRB1,TIGIT,... 9264 15 398 Topic3 195 0.0 157.969 Plasma cell vs All others in lung IGKC,CD38,JCHAIN,MZB1,IRF4,CD27,IGHG2,IGHA1,IG... 9264 14 157 Topic4 192 0.0 59.285 Plasma cell vs Memory B cell in lung MZB1,JCHAIN,XBP1,IGHM,IGHA1,TNFRSF17,IGHG1,DUS... 9264 14 387 Topic4 494 0.0 85.616 Memory B cell vs All others in lung CD52,FCRLA,SELL,CD74,LTB,HLA-DQA1,MS4A1,IGHD,I... 9264 16 368 Topic5 324 0.0 118.625 Vascular smooth muscle cell vs All others in lung IGFBP5,IGFBP7,SPARCL1,PDGFRB,GPX3,CALD1,BGN,TA... 9264 17 461 Topic6 323 0.0 100.241 Pericyte vs All others in lung RGS5,IGFBP7,SPARCL1,PDGFRB,GPX3,CALD1,BGN,COL4... 9264 17 538 Topic6 334 0.0 70.929 ADAMDEC1+ADAM28+ fibroblast vs All others in lung COL3A1,COL5A2,COL6A3,COL1A2,COL5A1,CDH11,COL1A... 9264 15 413 Topic7 237 0.0 64.018 Capillary EC vs All others in lung SPARCL1,RAMP3,FZD4,ESAM,VWF,FLT1,COL4A1,COL4A2... 9264 18 849 Topic8 240 0.0 50.222 Venous EC vs All others in lung ACKR1,RGS5,SPARCL1,GPX3,RAMP3,FZD4,ESAM,VWF,FL... 9264 17 776 Topic8 180 0.0 118.039 Goblet cell vs All others in lung TACSTD2,S100P,CLDN4,PSCA,LCN2,MMP7,KRT7,KRT8,K... 9264 13 166 Topic10 183 0.0 42.944 Airway basal cell vs All others in lung EPHA2,TACSTD2,CLDN4,KRT8,KRT18,KRT19,KRT17,S10... 9264 12 348 Topic10 167 0.0 33.483 Goblet cell vs AT2 in lung LCN2,S100P,CEACAM6,PSCA,TACSTD2,KRT19,KRT7,KRT... 9264 10 303 Topic10 350 0.0 190.913 LYVE1 macrophage vs All others in lung C1QA,C1QC,C1QB,FCER1G,MERTK,SELENOP,CD14,HLA-D... 9264 19 478 Topic11 326 0.0 176.581 LYVE1 macrophage vs cDC2 in lung SELENOP,C1QA,C1QB,C1QC,MS4A4A,CD163,PSAP,CD14,... 9264 18 337 Topic11 328 0.0 99.321 LYVE1 macrophage vs CD14 monocyte in lung C1QC,C1QA,C1QB,SELENOP,MRC1,HLA-DQA1,HLA-DRB1,... 9264 18 571 Topic11 169 0.0 35.909 Goblet cell vs All others in lung PIGR,S100P,AGR2,MMP7,KRT19,EPHA2 9264 6 166 Topic12 163 0.0 19.108 Goblet cell vs AT2 in lung S100P,AGR2,KRT19,PIGR,LYZ,MMP7 9264 6 303 Topic12 271 0.0 46.090 Goblet cell vs Airway basal cell in lung SLPI,CXCL17,CLU,LTF,CXCL2,KRT7,SERPINA1,MMP7 9264 8 155 Topic13 279 0.0 45.459 AT2 vs All others in lung CHI3L1,ITGB6,LAMP3,CXCL2,DMBT1,SLPI,CXCL17,EFN... 9264 12 330 Topic13 280 0.0 34.935 Goblet cell vs All others in lung LTF,MMP7,KRT7,SLPI,CXCL17,AQP3,CXCL2 9264 7 166 Topic13 526 0.0 401.837 LYVE1 macrophage vs All others in lung CD14,CSF1R,CD74,HLA-DRA,HLA-DRB1,HLA-DQA1,HLA-... 9264 20 478 Topic14 533 0.0 259.446 cDC2 vs All others in lung RGS1,CSF1R,CD74,HLA-DRA,HLA-DRB1,HLA-DQA1,HLA-... 9264 19 361 Topic14 293 0.0 181.388 CFD+MGP+ fibroblast vs All others in lung PDGFRA,COL1A2,PTGDS,MGP,LUM,DCN,MMP2,CDH11,COL... 9264 18 477 Topic15 660 0.0 88.800 CFD+MGP+ fibroblast vs Pericyte in lung LUM,MGP,DCN,MMP2,PTGDS,PDGFRA,COL1A1,CDH11,COL... 9264 17 601 Topic15 <p>Plot out some of the top gene modules and topics</p> In\u00a0[40]: Copied! <pre># Plot out Mast cells and top genes \"Topic2\"\nsctm.pl.spatial(adata, color = [\"Topic2\"] + beta.nlargest(3, \"Topic2\").index.tolist(), size = 7, vmax ='p99')\n</pre> # Plot out Mast cells and top genes \"Topic2\" sctm.pl.spatial(adata, color = [\"Topic2\"] + beta.nlargest(3, \"Topic2\").index.tolist(), size = 7, vmax ='p99') In\u00a0[42]: Copied! <pre># Plot out CAF and top genes \"Topic7\"\nsctm.pl.spatial(adata, color = [\"Topic7\"] + beta.nlargest(3, \"Topic7\").index.tolist(), size = 7, vmax ='p99')\n</pre> # Plot out CAF and top genes \"Topic7\" sctm.pl.spatial(adata, color = [\"Topic7\"] + beta.nlargest(3, \"Topic7\").index.tolist(), size = 7, vmax ='p99') In\u00a0[43]: Copied! <pre># Plot out tumor core and top genes \"Topic1\"\nsctm.pl.spatial(adata, color = [\"Topic1\"] + beta.nlargest(3, \"Topic1\").index.tolist(), size = 7, vmax ='p99')\n</pre> # Plot out tumor core and top genes \"Topic1\" sctm.pl.spatial(adata, color = [\"Topic1\"] + beta.nlargest(3, \"Topic1\").index.tolist(), size = 7, vmax ='p99') In\u00a0[44]: Copied! <pre># Plot out tumor edge and top genes \"Topic12\"\nsctm.pl.spatial(adata, color = [\"Topic12\"] + beta.nlargest(3, \"Topic12\").index.tolist(), size = 7, vmax ='p99')\n</pre> # Plot out tumor edge and top genes \"Topic12\" sctm.pl.spatial(adata, color = [\"Topic12\"] + beta.nlargest(3, \"Topic12\").index.tolist(), size = 7, vmax ='p99')"},{"location":"notebooks/stamp/example4/","title":"STAMP Multi Technolgy Mouse olfactory bulb","text":"<p>Batch correction module across different technologies. The processed data can be found at https://zenodo.org/records/10988053.</p> In\u00a0[\u00a0]: Copied! <pre>import scanpy as sc\nimport numpy as np\nimport sctm\nimport squidpy as sq\nimport pandas as pd\nimport seaborn as sns\nimport anndata as ad\n\n%load_ext autoreload\n%autoreload 2\n</pre> import scanpy as sc import numpy as np import sctm import squidpy as sq import pandas as pd import seaborn as sns import anndata as ad  %load_ext autoreload %autoreload 2 In\u00a0[\u00a0]: Copied! <pre>adata = sc.read_h5ad(\n    \"../../../../STAMP/Reproducibility/ProcessedData/Stereo_MOB/adata_processed.h5ad\"\n)\nadata.var_names_make_unique()\n</pre> adata = sc.read_h5ad(     \"../../../../STAMP/Reproducibility/ProcessedData/Stereo_MOB/adata_processed.h5ad\" ) adata.var_names_make_unique() In\u00a0[\u00a0]: Copied! <pre>adata_visium = adata[adata.obs.batch == \"visium\"]\nadata_stereo = adata[adata.obs.batch == \"stereo\"]\nadata_slide = adata[adata.obs.batch == \"slide\"]\n\n\ndef rotateMatrix(a):\n    return np.array([[np.cos(a), -np.sin(a)], [np.sin(a), np.cos(a)]])\nadata_visium.obsm['spatial'] = adata_visium.obsm['spatial'] @ rotateMatrix(4.6)\nadata_slide.obsm['spatial'] = adata_slide.obsm['spatial'] @ rotateMatrix(1.2)\n</pre> adata_visium = adata[adata.obs.batch == \"visium\"] adata_stereo = adata[adata.obs.batch == \"stereo\"] adata_slide = adata[adata.obs.batch == \"slide\"]   def rotateMatrix(a):     return np.array([[np.cos(a), -np.sin(a)], [np.sin(a), np.cos(a)]]) adata_visium.obsm['spatial'] = adata_visium.obsm['spatial'] @ rotateMatrix(4.6) adata_slide.obsm['spatial'] = adata_slide.obsm['spatial'] @ rotateMatrix(1.2) In\u00a0[\u00a0]: Copied! <pre>sctm.pl.spatial(adata_visium, size = 50, color = \"n_genes_by_counts\", vmax = 'p99')\nsctm.pl.spatial(adata_stereo, size = 2, color = \"n_genes_by_counts\", vmax = 'p99')\nsctm.pl.spatial(adata_slide, size = 3, color = \"n_genes_by_counts\", vmax = 'p99')\n</pre> sctm.pl.spatial(adata_visium, size = 50, color = \"n_genes_by_counts\", vmax = 'p99') sctm.pl.spatial(adata_stereo, size = 2, color = \"n_genes_by_counts\", vmax = 'p99') sctm.pl.spatial(adata_slide, size = 3, color = \"n_genes_by_counts\", vmax = 'p99') In\u00a0[\u00a0]: Copied! <pre># # Use hvgs\nsctm.seed.seed_everything(3)\n\nmodel = sctm.stamp.STAMP(\n    adata[:, adata.var.highly_variable],\n    n_topics=12,\n    categorical_covariate_keys=[\"batch\"],\n    layer=\"count\",\n    gene_likelihood=\"nb\",\n    dropout = 0.1,\n)\nmodel.train(batch_size = 4096)\n# model.save(\"models/Stereoseq_spatial_final12.pth\")\n# model.load(\"models/Stereoseq_spatial_final12.pth\")\n</pre> # # Use hvgs sctm.seed.seed_everything(3)  model = sctm.stamp.STAMP(     adata[:, adata.var.highly_variable],     n_topics=12,     categorical_covariate_keys=[\"batch\"],     layer=\"count\",     gene_likelihood=\"nb\",     dropout = 0.1, ) model.train(batch_size = 4096) # model.save(\"models/Stereoseq_spatial_final12.pth\") # model.load(\"models/Stereoseq_spatial_final12.pth\") In\u00a0[139]: Copied! <pre>topic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\n\nfor i in range(1, 12 + 1):\n    adata_visium.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]\n    adata_stereo.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]\n    adata_slide.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]\n    adata.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]\n\ntop_genes = []\nfor i in topic_prop.columns:\n    top_genes += beta.nlargest(1, i).index.tolist()\n</pre> topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic()  for i in range(1, 12 + 1):     adata_visium.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]     adata_stereo.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]     adata_slide.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]     adata.obs[f\"Topic{i}\"] = topic_prop[[f\"Topic{i}\"]]  top_genes = [] for i in topic_prop.columns:     top_genes += beta.nlargest(1, i).index.tolist() In\u00a0[140]: Copied! <pre>sctm.pl.spatial(adata_visium, color = topic_prop.columns, size = 100, vmax = 'p99')\nsctm.pl.spatial(adata_slide, color = topic_prop.columns, size = 3, vmax = 'p99')\nsctm.pl.spatial(adata_stereo, color = topic_prop.columns, size = 2, vmax = 'p99')\n</pre> sctm.pl.spatial(adata_visium, color = topic_prop.columns, size = 100, vmax = 'p99') sctm.pl.spatial(adata_slide, color = topic_prop.columns, size = 3, vmax = 'p99') sctm.pl.spatial(adata_stereo, color = topic_prop.columns, size = 2, vmax = 'p99') In\u00a0[142]: Copied! <pre>sctm.pl.spatial(adata_visium, color = top_genes, size = 100, vmax = 'p99')\nsctm.pl.spatial(adata_slide, color = top_genes, size = 3, vmax = 'p99')\nsctm.pl.spatial(adata_stereo, color = top_genes, size = 2, vmax = 'p99')\n</pre> sctm.pl.spatial(adata_visium, color = top_genes, size = 100, vmax = 'p99') sctm.pl.spatial(adata_slide, color = top_genes, size = 3, vmax = 'p99') sctm.pl.spatial(adata_stereo, color = top_genes, size = 2, vmax = 'p99') In\u00a0[145]: Copied! <pre>adata.obsm['X_stamp'] = topic_prop.values\n</pre> adata.obsm['X_stamp'] = topic_prop.values In\u00a0[148]: Copied! <pre># We use hellinger distance here as it is perfect for comparing between distributions\n# https://en.wikipedia.org/wiki/Hellinger_distance\nsc.pp.neighbors(adata, metric = \"hellinger\", use_rep = \"X_stamp\")\nsc.tl.umap(adata)\n</pre> # We use hellinger distance here as it is perfect for comparing between distributions # https://en.wikipedia.org/wiki/Hellinger_distance sc.pp.neighbors(adata, metric = \"hellinger\", use_rep = \"X_stamp\") sc.tl.umap(adata) <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/distances.py:1063: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/distances.py:1071: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/distances.py:1086: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/umap_.py:660: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n</pre> In\u00a0[150]: Copied! <pre>sc.pl.umap(adata, color = 'batch')\n</pre> sc.pl.umap(adata, color = 'batch') <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n</pre>"},{"location":"notebooks/stamp/example5/","title":"STAMP Time series Mouse embryo","text":"<p>Time series analysis. In this part, we focus on time series data of Stereo-seq Mouse embryo</p> In\u00a0[1]: Copied! <pre>import scanpy as sc\nimport numpy as np\nimport sctm\nimport squidpy as sq\nimport pandas as pd\nimport seaborn as sns\nimport anndata as ad\n\n%load_ext autoreload\n%autoreload 2\n</pre> import scanpy as sc import numpy as np import sctm import squidpy as sq import pandas as pd import seaborn as sns import anndata as ad  %load_ext autoreload %autoreload 2 <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/geopandas/_compat.py:124: UserWarning: The Shapely GEOS version (3.11.1-CAPI-1.17.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.4-CAPI-1.16.2). Conversions between both will be slow.\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/spatialdata/__init__.py:9: UserWarning: Geopandas was set to use PyGEOS, changing to shapely 2.0 with:\n\n\tgeopandas.options.use_pygeos = True\n\nIf you intended to use PyGEOS, set the option to False.\n  _check_geopandas_using_shapely()\n</pre> <p>The processed data can be found at https://zenodo.org/records/10988053.</p> In\u00a0[2]: Copied! <pre>adata = sc.read_h5ad(\n    \"../../../../STAMP/Reproducibility/ProcessedData/Stereo_embryo/adata_clean.h5ad\"\n)\nadata.var_names_make_unique()\n</pre> adata = sc.read_h5ad(     \"../../../../STAMP/Reproducibility/ProcessedData/Stereo_embryo/adata_clean.h5ad\" ) adata.var_names_make_unique() In\u00a0[3]: Copied! <pre>sctm.pl.spatial(adata, color=\"annotation\", size=0.3)\n</pre> sctm.pl.spatial(adata, color=\"annotation\", size=0.3) <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/scanpy/plotting/_tools/scatterplots.py:392: UserWarning: No data for colormapping provided via 'c'. Parameters 'cmap' will be ignored\n  cax = scatter(\n</pre> <p>We work with a downsampled data here, since that the whole process will take a few hours</p> In\u00a0[4]: Copied! <pre>adata_downsampled = sc.pp.subsample(adata, fraction=0.1, copy=True)\n</pre> adata_downsampled = sc.pp.subsample(adata, fraction=0.1, copy=True) In\u00a0[5]: Copied! <pre># We uses roughly (1/1000) * size\nsq.gr.spatial_neighbors(adata_downsampled, n_neighs=round(1 / 1000 * adata.n_obs))\n</pre> # We uses roughly (1/1000) * size sq.gr.spatial_neighbors(adata_downsampled, n_neighs=round(1 / 1000 * adata.n_obs)) In\u00a0[43]: Copied! <pre>sctm.seed.seed_everything(0)\n\nmodel = sctm.stamp.STAMP(\n    adata_downsampled,\n    n_topics=40,\n    layer=\"count\",\n    time_covariate_keys=\"time\",\n    # gene_likelihood=\"poisson\",\n)\n\n# We used a weighted sampler here as that the first timepoint is extremly small compared to the last timepoint.\nmodel.train(device=\"cuda:0\", sampler = \"W\")\n</pre> sctm.seed.seed_everything(0)  model = sctm.stamp.STAMP(     adata_downsampled,     n_topics=40,     layer=\"count\",     time_covariate_keys=\"time\",     # gene_likelihood=\"poisson\", )  # We used a weighted sampler here as that the first timepoint is extremly small compared to the last timepoint. model.train(device=\"cuda:0\", sampler = \"W\") <pre>Computing background frequencies\nComputing background frequencies\nComputing background frequencies\nComputing background frequencies\nComputing background frequencies\nComputing background frequencies\nComputing background frequencies\nComputing background frequencies\n</pre> <pre>  0%|                                                                                                                                     | 0/800 [00:00&lt;?, ?it/s]/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.0.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.1.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.2.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.3.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.4.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.5.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.6.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.7.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\nEpoch Loss:1258.649:  17%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                                   | 135/800 [58:35&lt;4:48:37, 26.04s/it]</pre> <pre>Early Stopping\n</pre> <pre>\n</pre> In\u00a0[45]: Copied! <pre>topic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\nfor i in topic_prop.columns:\n    adata_downsampled.obs[i] = topic_prop[i]\n</pre> topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic() for i in topic_prop.columns:     adata_downsampled.obs[i] = topic_prop[i] In\u00a0[49]: Copied! <pre>sctm.pl.spatial(adata, color = \"Topic16\", size = 5, vmax = 'p99')\n</pre> sctm.pl.spatial(adata, color = \"Topic16\", size = 5, vmax = 'p99') In\u00a0[48]: Copied! <pre>sctm.pl.spatial(adata_downsampled, color=topic_prop.columns, size = 5, vmax=\"p99\")\n</pre> sctm.pl.spatial(adata_downsampled, color=topic_prop.columns, size = 5, vmax=\"p99\") In\u00a0[58]: Copied! <pre># Topic 36 is the heart\ntopic = \"Topic36\"\ngenes = []\nfor i in range(8):\n    genes += beta.xs(topic, level=1).transpose().nlargest(10, i).index.tolist()\ngenes = np.unique(genes)\n\nbeta.xs(topic, level=1).rank(ascending=False, axis=1).transpose().loc[genes]\n\nsns.clustermap(\n    beta.xs(topic, level=1).transpose().loc[genes],\n    col_cluster=False,\n    cmap=\"RdBu_r\",\n    vmin=-3,\n    xticklabels=True,\n    yticklabels=True,\n    annot=True,\n)\n</pre> # Topic 36 is the heart topic = \"Topic36\" genes = [] for i in range(8):     genes += beta.xs(topic, level=1).transpose().nlargest(10, i).index.tolist() genes = np.unique(genes)  beta.xs(topic, level=1).rank(ascending=False, axis=1).transpose().loc[genes]  sns.clustermap(     beta.xs(topic, level=1).transpose().loc[genes],     col_cluster=False,     cmap=\"RdBu_r\",     vmin=-3,     xticklabels=True,     yticklabels=True,     annot=True, ) Out[58]: <pre>&lt;seaborn.matrix.ClusterGrid at 0x7fccc93aaa60&gt;</pre> In\u00a0[53]: Copied! <pre>sctm.pl.spatial(adata_downsampled, color=[\"Topic9\", \"Topic17\"], size = 5, vmax=\"p99\")\n</pre> sctm.pl.spatial(adata_downsampled, color=[\"Topic9\", \"Topic17\"], size = 5, vmax=\"p99\") In\u00a0[55]: Copied! <pre># Topic 9 is the hematopoesis\ntopic = \"Topic9\"\ngenes = []\nfor i in range(8):\n    genes += beta.xs(topic, level=1).transpose().nlargest(10, i).index.tolist()\ngenes = np.unique(genes)\n\nbeta.xs(topic, level=1).rank(ascending=False, axis=1).transpose().loc[genes]\n\nsns.clustermap(\n    beta.xs(topic, level=1).transpose().loc[genes],\n    col_cluster=False,\n    cmap=\"RdBu_r\",\n    vmin=-3,\n    xticklabels=True,\n    yticklabels=True,\n    annot=True,\n)\n</pre> # Topic 9 is the hematopoesis topic = \"Topic9\" genes = [] for i in range(8):     genes += beta.xs(topic, level=1).transpose().nlargest(10, i).index.tolist() genes = np.unique(genes)  beta.xs(topic, level=1).rank(ascending=False, axis=1).transpose().loc[genes]  sns.clustermap(     beta.xs(topic, level=1).transpose().loc[genes],     col_cluster=False,     cmap=\"RdBu_r\",     vmin=-3,     xticklabels=True,     yticklabels=True,     annot=True, ) Out[55]: <pre>&lt;seaborn.matrix.ClusterGrid at 0x7fcc92328be0&gt;</pre> In\u00a0[56]: Copied! <pre># Topic 5 is the heart\ntopic = \"Topic17\"\ngenes = []\nfor i in range(8):\n    genes += beta.xs(topic, level=1).transpose().nlargest(20, i).index.tolist()\ngenes = np.unique(genes)\n\nbeta.xs(topic, level=1).rank(ascending=False, axis=1).transpose().loc[genes]\n\nsns.clustermap(\n    beta.xs(topic, level=1).transpose().loc[genes],\n    col_cluster=False,\n    cmap=\"RdBu_r\",\n    vmin=-3,\n    xticklabels=True,\n    yticklabels=True,\n    annot=True,\n)\n</pre> # Topic 5 is the heart topic = \"Topic17\" genes = [] for i in range(8):     genes += beta.xs(topic, level=1).transpose().nlargest(20, i).index.tolist() genes = np.unique(genes)  beta.xs(topic, level=1).rank(ascending=False, axis=1).transpose().loc[genes]  sns.clustermap(     beta.xs(topic, level=1).transpose().loc[genes],     col_cluster=False,     cmap=\"RdBu_r\",     vmin=-3,     xticklabels=True,     yticklabels=True,     annot=True, ) Out[56]: <pre>&lt;seaborn.matrix.ClusterGrid at 0x7fccc920d640&gt;</pre>"},{"location":"notebooks/stamp/example6/","title":"STAMP Multi Sample DLPFC","text":"<p>In this part, we focus on batch-correction for multi-sample Human DLPFC. The prepocessed data can be accessible and downloaded via https://zenodo.org/records/10988053.</p> In\u00a0[1]: Copied! <pre>import scanpy as sc\nimport numpy as np\nimport sctm\nimport squidpy as sq\nimport pandas as pd\nimport seaborn as sns\nimport anndata as ad\n\n# Please install scib metrics to run this example\n# https://scib-metrics.readthedocs.io/en/stable/\nimport scib_metrics\nfrom scib_metrics.benchmark import Benchmarker\n\n%load_ext autoreload\n%autoreload 2\n</pre> import scanpy as sc import numpy as np import sctm import squidpy as sq import pandas as pd import seaborn as sns import anndata as ad  # Please install scib metrics to run this example # https://scib-metrics.readthedocs.io/en/stable/ import scib_metrics from scib_metrics.benchmark import Benchmarker  %load_ext autoreload %autoreload 2 <pre>/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/geopandas/_compat.py:124: UserWarning: The Shapely GEOS version (3.11.1-CAPI-1.17.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.4-CAPI-1.16.2). Conversions between both will be slow.\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/spatialdata/__init__.py:9: UserWarning: Geopandas was set to use PyGEOS, changing to shapely 2.0 with:\n\n\tgeopandas.options.use_pygeos = True\n\nIf you intended to use PyGEOS, set the option to False.\n  _check_geopandas_using_shapely()\n</pre> In\u00a0[2]: Copied! <pre>adata = sc.read_h5ad(\n    \"../../../../STAMP/Reproducibility/ProcessedData/Visium_DLPFC/adata.h5ad\"\n)\n</pre> adata = sc.read_h5ad(     \"../../../../STAMP/Reproducibility/ProcessedData/Visium_DLPFC/adata.h5ad\" ) In\u00a0[3]: Copied! <pre>adata\n# The data  already have spatial neighbors built with default scanpy parameters\n</pre> adata # The data  already have spatial neighbors built with default scanpy parameters Out[3]: <pre>AnnData object with n_obs \u00d7 n_vars = 47681 \u00d7 4000\n    obs: 'in_tissue', 'array_row', 'array_col', 'library_id', 'layer', 'Topic1', 'Topic2', 'Topic3', 'Topic4', 'Topic5', 'Topic6', 'Topic7', 'Topic8', 'Topic9', 'Topic10', '_scvi_batch', '_scvi_labels'\n    var: 'highly_variable_rank', 'highly_variable'\n    uns: '_scvi_manager_uuid', '_scvi_uuid', 'beta', 'neighbors', 'spatial', 'spatial_neighbors', 'topic_prop', 'umap'\n    obsm: 'X_pca', 'X_scvi', 'X_stamp', 'X_umap', 'spatial'\n    layers: 'counts'\n    obsp: 'connectivities', 'distances', 'spatial_connectivities', 'spatial_distances'</pre> In\u00a0[4]: Copied! <pre># In this case, we use the SGC, since we want the embeddings to be smooth\nsctm.seed.seed_everything(0)\n\nmodel = sctm.stamp.STAMP(\n    adata,\n    n_topics = 10,\n    # layer=\"count\",\n    categorical_covariate_keys=[\"library_id\"],\n    mode=\"sgc\",\n    gene_likelihood=\"nb\")\n\nmodel.train(learning_rate = 0.01)\n</pre> # In this case, we use the SGC, since we want the embeddings to be smooth sctm.seed.seed_everything(0)  model = sctm.stamp.STAMP(     adata,     n_topics = 10,     # layer=\"count\",     categorical_covariate_keys=[\"library_id\"],     mode=\"sgc\",     gene_likelihood=\"nb\")  model.train(learning_rate = 0.01) <pre>Computing background frequencies\n</pre> <pre>  0%|                                                                                                                        | 0/800 [00:00&lt;?, ?it/s]/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.0.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.1.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.2.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.3.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.4.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.5.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.6.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.7.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.8.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.9.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.10.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.11.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\nEpoch Loss:1614.948:  16%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                                                       | 125/800 [1:01:52&lt;5:34:06, 29.70s/it]</pre> <pre>Early Stopping\n</pre> <pre>\n</pre> In\u00a0[5]: Copied! <pre>topic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\nfor i in topic_prop.columns:\n    adata.obs[i] =  topic_prop[i]\n</pre> topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic() for i in topic_prop.columns:     adata.obs[i] =  topic_prop[i] In\u00a0[6]: Copied! <pre>adata1 = adata[adata.obs.library_id == \"151673\"]\nsctm.pl.spatial(adata1, color = topic_prop.columns, size = 40)\n</pre> adata1 = adata[adata.obs.library_id == \"151673\"] sctm.pl.spatial(adata1, color = topic_prop.columns, size = 40) In\u00a0[7]: Copied! <pre>adata.obsm[\"X_stamp\"] = topic_prop.values\n</pre> adata.obsm[\"X_stamp\"] = topic_prop.values In\u00a0[8]: Copied! <pre>adata.obs['library_id'] = adata.obs['library_id'].astype('category')\nadata.obs['layer'] = adata.obs['layer'].astype('category')\n</pre> adata.obs['library_id'] = adata.obs['library_id'].astype('category') adata.obs['layer'] = adata.obs['layer'].astype('category') In\u00a0[9]: Copied! <pre># Remove the NA ones so we can benchmark\nadata = adata[~adata.obs.layer.isna()]\n</pre> # Remove the NA ones so we can benchmark adata = adata[~adata.obs.layer.isna()] In\u00a0[10]: Copied! <pre># Add abit of jitter due to some problems with the current scib metrics\nadata.obsm[\"X_stamp\"] = np.random.standard_normal((47329, 10)) * 1e-8 + adata.obsm[\"X_stamp\"]\n</pre> # Add abit of jitter due to some problems with the current scib metrics adata.obsm[\"X_stamp\"] = np.random.standard_normal((47329, 10)) * 1e-8 + adata.obsm[\"X_stamp\"] In\u00a0[11]: Copied! <pre>bm = Benchmarker(\n    adata,\n    batch_key=\"library_id\",\n    label_key=\"layer\",\n    embedding_obsm_keys=[\"X_stamp\", \"X_pca\"],\n    n_jobs=6,\n)\nbm.benchmark()\n</pre> bm = Benchmarker(     adata,     batch_key=\"library_id\",     label_key=\"layer\",     embedding_obsm_keys=[\"X_stamp\", \"X_pca\"],     n_jobs=6, ) bm.benchmark() <pre>Computing neighbors:   0%|                                                                                                     | 0/2 [00:00&lt;?, ?it/s]/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/distances.py:1063: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/distances.py:1071: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/distances.py:1086: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\n/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/umap/umap_.py:660: NumbaDeprecationWarning: The 'nopython' keyword argument was not supplied to the 'numba.jit' decorator. The implicit default value for this argument is currently False, but it will be changed to True in Numba 0.59.0. See https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit for details.\n  @numba.jit()\nComputing neighbors: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [05:00&lt;00:00, 150.25s/it]\nEmbeddings:   0%|                                                                                                              | 0/2 [00:00&lt;?, ?it/s]\nMetrics:   0%|                                                                                                                | 0/10 [00:00&lt;?, ?it/s]\nMetrics:   0%|                                                                             | 0/10 [00:00&lt;?, ?it/s, Bio conservation: isolated_labels]INFO:root:isolated labels: no more than 8 batches per label\nINFO:jax._src.xla_bridge:Unable to initialize backend 'cuda': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'\nINFO:jax._src.xla_bridge:Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'\nINFO:jax._src.xla_bridge:Unable to initialize backend 'tpu': INVALID_ARGUMENT: TpuPlatform is not available.\nWARNING:jax._src.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n\nMetrics:  10%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                              | 1/10 [00:14&lt;02:13, 14.79s/it, Bio conservation: isolated_labels]\nMetrics:  10%|\u2588\u2588\u2588\u2588\u2588\u258c                                                 | 1/10 [00:14&lt;02:13, 14.79s/it, Bio conservation: nmi_ari_cluster_labels_kmeans]\nMetrics:  20%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                            | 2/10 [00:19&lt;01:09,  8.64s/it, Bio conservation: nmi_ari_cluster_labels_kmeans]\nMetrics:  20%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                      | 2/10 [00:19&lt;01:09,  8.64s/it, Bio conservation: silhouette_label]\nMetrics:  30%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                               | 3/10 [00:33&lt;01:19, 11.42s/it, Bio conservation: silhouette_label]\nMetrics:  30%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                    | 3/10 [00:33&lt;01:19, 11.42s/it, Bio conservation: clisi_knn]\nMetrics:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                             | 4/10 [00:35&lt;00:46,  7.70s/it, Bio conservation: clisi_knn]\nMetrics:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                        | 4/10 [00:35&lt;00:46,  7.70s/it, Batch correction: silhouette_batch]\nMetrics:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                  | 5/10 [00:44&lt;00:39,  7.88s/it, Batch correction: silhouette_batch]\nMetrics:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                     | 5/10 [00:44&lt;00:39,  7.88s/it, Batch correction: ilisi_knn]\nMetrics:  60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                              | 6/10 [00:44&lt;00:22,  5.51s/it, Batch correction: ilisi_knn]\nMetrics:  60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                            | 6/10 [00:44&lt;00:22,  5.51s/it, Batch correction: kbet_per_label]\nMetrics:  70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                     | 7/10 [01:32&lt;00:57, 19.17s/it, Batch correction: kbet_per_label]\nMetrics:  70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                   | 7/10 [01:32&lt;00:57, 19.17s/it, Batch correction: graph_connectivity]\nMetrics:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              | 8/10 [01:32&lt;00:38, 19.17s/it, Batch correction: pcr_comparison]\nEmbeddings:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                   | 1/2 [01:33&lt;01:33, 93.52s/it]\nMetrics:   0%|                                                                                                                | 0/10 [00:00&lt;?, ?it/s]\n                                                                                                                                                     \nMetrics:   0%|                                                                             | 0/10 [00:00&lt;?, ?it/s, Bio conservation: isolated_labels]INFO:root:isolated labels: no more than 8 batches per label\n\nMetrics:  10%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                              | 1/10 [01:35&lt;14:16, 95.20s/it, Bio conservation: isolated_labels]\nMetrics:  10%|\u2588\u2588\u2588\u2588\u2588\u258c                                                 | 1/10 [01:35&lt;14:16, 95.20s/it, Bio conservation: nmi_ari_cluster_labels_kmeans]\nMetrics:  20%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                            | 2/10 [01:41&lt;05:43, 42.92s/it, Bio conservation: nmi_ari_cluster_labels_kmeans]\nMetrics:  20%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                      | 2/10 [01:41&lt;05:43, 42.92s/it, Bio conservation: silhouette_label]\nMetrics:  30%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                               | 3/10 [03:06&lt;07:16, 62.30s/it, Bio conservation: silhouette_label]\nMetrics:  30%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                    | 3/10 [03:06&lt;07:16, 62.30s/it, Bio conservation: clisi_knn]\nMetrics:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                             | 4/10 [03:07&lt;03:48, 38.05s/it, Bio conservation: clisi_knn]\nMetrics:  40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                        | 4/10 [03:07&lt;03:48, 38.05s/it, Batch correction: silhouette_batch]\nMetrics:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                  | 5/10 [03:28&lt;02:39, 31.91s/it, Batch correction: silhouette_batch]\nMetrics:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                     | 5/10 [03:28&lt;02:39, 31.91s/it, Batch correction: ilisi_knn]\nMetrics:  60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                              | 6/10 [03:29&lt;01:25, 21.31s/it, Batch correction: ilisi_knn]\nMetrics:  60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                            | 6/10 [03:29&lt;01:25, 21.31s/it, Batch correction: kbet_per_label]\nMetrics:  70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                     | 7/10 [04:12&lt;01:25, 28.55s/it, Batch correction: kbet_per_label]\nMetrics:  70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                   | 7/10 [04:12&lt;01:25, 28.55s/it, Batch correction: graph_connectivity]\nMetrics:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a             | 8/10 [04:13&lt;00:38, 19.50s/it, Batch correction: graph_connectivity]\nMetrics:  80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              | 8/10 [04:13&lt;00:38, 19.50s/it, Batch correction: pcr_comparison]\nEmbeddings: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [05:47&lt;00:00, 173.60s/it]\n\n                                                                                                                                                     </pre> In\u00a0[13]: Copied! <pre>bm.plot_results_table(min_max_scale=False)\n</pre> bm.plot_results_table(min_max_scale=False) Out[13]: <pre>&lt;plottable.table.Table at 0x7f8d0c5ee0d0&gt;</pre>"},{"location":"notebooks/stamp/example7/","title":"Example7","text":"In\u00a0[5]: Copied! <pre>import scanpy as sc\nimport numpy as np\nimport sctm\nimport squidpy as sq\n\n%load_ext autoreload\n%autoreload 2\n</pre> import scanpy as sc import numpy as np import sctm import squidpy as sq  %load_ext autoreload %autoreload 2 <pre>The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n</pre> <p>In this tutorial, we demonstrate how to analyse Slide-seq data</p> <p>The prepocessed data can be accessible and downloaded via https://zenodo.org/records/10906593</p> In\u00a0[6]: Copied! <pre>adata = sc.read_h5ad(\n    \"../../../../STAMP/Reproducibility/ProcessedData/Slideseq_Mousebrain/adata.h5ad\"\n)\nadata.var_names_make_unique()\n</pre> adata = sc.read_h5ad(     \"../../../../STAMP/Reproducibility/ProcessedData/Slideseq_Mousebrain/adata.h5ad\" ) adata.var_names_make_unique() In\u00a0[7]: Copied! <pre># Filter_genes filter out genes that are expressed in less than 1% of the cells\nsctm.pp.filter_genes(adata, 0.01)\nsc.pp.filter_cells(adata, min_genes = 100)\n\nsq.gr.spatial_neighbors(\n    adata,\n    n_neighs=round(1/1000 * adata.n_obs),\n    coord_type=\"generic\",\n    spatial_key=\"spatial\",\n)\nadata.layers[\"counts\"] = adata.X.copy()\nsc.pp.highly_variable_genes(adata, layer=\"counts\", n_top_genes=6000, flavor=\"seurat_v3\", subset = True)\n</pre> # Filter_genes filter out genes that are expressed in less than 1% of the cells sctm.pp.filter_genes(adata, 0.01) sc.pp.filter_cells(adata, min_genes = 100)  sq.gr.spatial_neighbors(     adata,     n_neighs=round(1/1000 * adata.n_obs),     coord_type=\"generic\",     spatial_key=\"spatial\", ) adata.layers[\"counts\"] = adata.X.copy() sc.pp.highly_variable_genes(adata, layer=\"counts\", n_top_genes=6000, flavor=\"seurat_v3\", subset = True) In\u00a0[17]: Copied! <pre>n_topics = 30\n# Only hvgs and fit a total of 30 topics here\nsctm.seed.seed_everything(0)\n#\nmodel = sctm.stamp.STAMP(\n    adata[:, adata.var.highly_variable],\n    n_topics=n_topics,\n    layer = \"counts\",\n    gene_likelihood = \"nb\")\n# uses gpu by default  to use cpu use device=\"cpu\"\nmodel.train(learning_rate = 0.01)\n</pre> n_topics = 30 # Only hvgs and fit a total of 30 topics here sctm.seed.seed_everything(0) # model = sctm.stamp.STAMP(     adata[:, adata.var.highly_variable],     n_topics=n_topics,     layer = \"counts\",     gene_likelihood = \"nb\") # uses gpu by default  to use cpu use device=\"cpu\" model.train(learning_rate = 0.01) <pre>Computing background frequencies\n</pre> <pre>  0%|                                                                                                                        | 0/800 [00:00&lt;?, ?it/s]/home/chengwei/miniconda3/envs/torch/lib/python3.9/site-packages/pyro/primitives.py:443: UserWarning: encoder.norm_topic.0.weight was not registered in the param store because requires_grad=False. You can silence this warning by calling my_module.train(False)\n  warnings.warn(\nEpoch Loss:982.766:  17%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                       | 139/800 [1:01:35&lt;4:52:52, 26.58s/it]</pre> <pre>Early Stopping\n</pre> <pre>\n</pre> In\u00a0[18]: Copied! <pre>topic_prop = model.get_cell_by_topic()\nbeta = model.get_feature_by_topic()\nfor i in topic_prop.columns:\n    adata.obs[i] = topic_prop[i]\n</pre> topic_prop = model.get_cell_by_topic() beta = model.get_feature_by_topic() for i in topic_prop.columns:     adata.obs[i] = topic_prop[i] <p>Plotting out of each individual topics</p> In\u00a0[19]: Copied! <pre>fig = sctm.pl.spatial(adata, color=topic_prop.columns, ncols=5, size=6, vmax=\"p99\", show = False)\n</pre> fig = sctm.pl.spatial(adata, color=topic_prop.columns, ncols=5, size=6, vmax=\"p99\", show = False) In\u00a0[20]: Copied! <pre>topics = [\"Topic6\", \"Topic7\", \"Topic11\", \"Topic30\", \"Topic16\", \"Topic29\", \"Topic4\"]\n</pre> topics = [\"Topic6\", \"Topic7\", \"Topic11\", \"Topic30\", \"Topic16\", \"Topic29\", \"Topic4\"] In\u00a0[21]: Copied! <pre>genes = []\nfor topic in topics:\n    genes = genes + beta.nlargest(1, topic).index.tolist()\n</pre> genes = [] for topic in topics:     genes = genes + beta.nlargest(1, topic).index.tolist() In\u00a0[24]: Copied! <pre>sctm.pl.spatial(adata, color = topics, size = 6, ncols = 7, vmax = 'p99')\nsctm.pl.spatial(adata, color = genes, size = 6, ncols = 7, vmax = 'p99')\n</pre> sctm.pl.spatial(adata, color = topics, size = 6, ncols = 7, vmax = 'p99') sctm.pl.spatial(adata, color = genes, size = 6, ncols = 7, vmax = 'p99')"}]}